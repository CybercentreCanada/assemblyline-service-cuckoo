# NETWORKING
# The networking configured here may seem convoluted, but there's a logic to it.
# Each VM configured gets its own bridge interface onto the host in the global network namespace.
# This bridge is also what cuckoo is configured to run the sniffer on
# In the original configuration, we applied a DNAT rule on this bridge interface to redirect all traffic to the
# inetsim IP. This mostly worked but had two one main drawback in the case of hard coded IPs:
# since the DNAT rule was applied on that interface, when capturing traffic you would see traffic from the VM IP
# to the inetsim IP, then the response would come back from the hardcoded IP. This broke any re-sessionization
# that cuckoo tried to do with the PCAP afterware.
# This didn't cause an issue if the malware did a DNS lookup, since we had configured inetsim to return
# it's own IP for any domain.
#
# The solution: move the inetsim interface and process to its own network namespace. Connect the VM bridge interfaces
# to the other network namespace using veth pairs, with the gateway and 'fakenet' IP defined on the inetsim side of
# the veth pair. Set the DNAT rule on the inetsim namespace side, so that when cuckoo runs the sniffer on the VM bridge
# interface, it sees normal local/pre-nat traffic flows.

{% for context in contexts %}
auto {{ context.virt_bridge_name }}_dmy
iface {{ context.virt_bridge_name }}_dmy inet manual
    pre-up /sbin/ip link add {{ context.virt_bridge_name }}_dmy type dummy
    up /sbin/ip link set {{ context.virt_bridge_name }}_dmy address {{ context.mac }}

{% if context.route_opt == "inetsim" %}
# We only need the veth pair for inetsim routing
# This uses some third party ifupdown scripts from https://github.com/m0kct/debian-netns to create the namespace
# and veth pairs
auto veth1_{{ context.virt_bridge_name[:4] }}
iface veth1_{{ context.virt_bridge_name[:4] }} inet manual
    peer-netns inetsimns
    peer-iface veth2_{{ context.virt_bridge_name[:4] }}
    configure-interfaces yes
{%  endif %}

auto {{ context.virt_bridge_name }}
iface {{ context.virt_bridge_name }} inet static
    bridge_ports {{ context.virt_bridge_name }}_dmy {% if context.route_opt == "inetsim" %} veth1_{{ context.virt_bridge_name[:4] }} {% endif %}
    bridge_stp on
    bridge_fd 2
    address {{ context.virt_bridge_resultserver_ip }}
    netmask {{ context.virt_bridge_netmask }}

{% if context.route_opt == "gateway" %}
# put the gateway IP on the bridge if we're in gateway/internet connected mode
auto {{ context.virt_bridge_name }}:0
iface {{ context.virt_bridge_name }}:0 inet static
    address {{ context.virt_bridge_ip }}
    netmask {{ context.virt_bridge_netmask }}
{% endif %}

{% endfor %}

